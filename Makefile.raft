.PHONY: help network bin chaincode tools CRYPTO
.DEFAULT_GOAL := help
CRYPTO = /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto

CHAINCODE_VERSION = $(shell cat ./src/chaincode/package.json | jq '.version')
CHAINCODE_NAME="main"
CHAINCODE_LANG="node"
CHAINCODE_PATH="/opt/gopath/src/github.com/chaincode_compiled"
CHAINCODE_SEQUENCE=1
CHAINCODE_CONSTRUCTOR='{"Args":[]}'

CHANNEL_NAME=primary

ORG1_MSPID=Org1MSP
ORG2_MSPID=Org2MSP

PEER0_ORG1_ADDRESS=peer0.org1.example.com:7051
PEER1_ORG1_ADDRESS=peer1.org1.example.com:8051
PEER0_ORG2_ADDRESS=peer0.org2.example.com:9051
PEER1_ORG2_ADDRESS=peer1.org2.example.com:10051

ORG1_MSPCONFIGPATH=$(CRYPTO)/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
ORG2_MSPCONFIGPATH=$(CRYPTO)/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp

ORG1_TLS_ROOTCERT_FILE=$(CRYPTO)/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
ORG2_TLS_ROOTCERT_FILE=$(CRYPTO)/peerOrganizations/org2.example.com/tlsca/tlsca.org2.example.com-cert.pem

ORG1_TLS_CLIENTCERT_FILE=$(CRYPTO)/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.crt
ORG2_TLS_CLIENTCERT_FILE=$(CRYPTO)/peerOrganizations/org2.example.com/users/Admin@org2.example.com/tls/client.crt

ORG1_TLS_CLIENTKEY_FILE=$(CRYPTO)/peerOrganizations/org1.example.com/users/Admin@org1.example.com/tls/client.key
ORG2_TLS_CLIENTKEY_FILE=$(CRYPTO)/peerOrganizations/org2.example.com/users/Admin@org2.example.com/tls/client.key

ORG1=--env CORE_PEER_LOCALMSPID=${ORG1_MSPID} --env CORE_PEER_ADDRESS=${PEER0_ORG1_ADDRESS} --env CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} --env CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} --env CORE_PEER_TLS_CLIENTAUTHREQUIRED=true --env CORE_PEER_TLS_CLIENTCERT_FILE=${ORG1_TLS_CLIENTCERT_FILE} --env CORE_PEER_TLS_CLIENTKEY_FILE=${ORG1_TLS_CLIENTKEY_FILE}
ORG2=--env CORE_PEER_LOCALMSPID=${ORG2_MSPID} --env CORE_PEER_ADDRESS=${PEER0_ORG2_ADDRESS} --env CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} --env CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} --env CORE_PEER_TLS_CLIENTAUTHREQUIRED=true --env CORE_PEER_TLS_CLIENTCERT_FILE=${ORG2_TLS_CLIENTCERT_FILE} --env CORE_PEER_TLS_CLIENTKEY_FILE=${ORG2_TLS_CLIENTKEY_FILE}
PEER1=${ORG1}
PEER2=${ORG2}
PEER3=--env CORE_PEER_LOCALMSPID=${ORG1_MSPID} --env CORE_PEER_ADDRESS=${PEER1_ORG1_ADDRESS} --env CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} --env CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} --env CORE_PEER_TLS_CLIENTAUTHREQUIRED=true --env CORE_PEER_TLS_CLIENTCERT_FILE=${ORG1_TLS_CLIENTCERT_FILE} --env CORE_PEER_TLS_CLIENTKEY_FILE=${ORG1_TLS_CLIENTKEY_FILE}
PEER4=--env CORE_PEER_LOCALMSPID=${ORG2_MSPID} --env CORE_PEER_ADDRESS=${PEER1_ORG2_ADDRESS} --env CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} --env CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} --env CORE_PEER_TLS_CLIENTAUTHREQUIRED=true --env CORE_PEER_TLS_CLIENTCERT_FILE=${ORG2_TLS_CLIENTCERT_FILE} --env CORE_PEER_TLS_CLIENTKEY_FILE=${ORG2_TLS_CLIENTKEY_FILE}
#ORG3 = -e CORE_PEER_LOCALMSPID=Org3MSP -e CORE_PEER_ADDRESS=peer0.org3.example.com:7051 -e CORE_PEER_MSPCONFIGPATH=./crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp -e CORE_PEER_TLS_ROOTCERT_FILE=./crypto/peerOrganizations/org3.example.com/tlsca/tlsca.org3.example.com-cert.pem -e CORE_PEER_TLS_CLIENTAUTHREQUIRED=true -e CORE_PEER_TLS_CLIENTCERT_FILE=./crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/tls/client.crt -e CORE_PEER_TLS_CLIENTKEY_FILE=./crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/tls/client.key -e CORE_PEER_TLS_ROOTCERT_FILE=./crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/tls/ca.crt

ORDERER_ADDRESS=orderer.example.com:7050
ORDERER_ORG_TLS_CERTFILE=$(CRYPTO)/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
ORDERER_TLS_CERTFILE=$(CRYPTO)/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
PEER0_ORG1_TLS_CERTFILE=$(CRYPTO)/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt
PEER0_ORG_TLS_KEYFILE=$(CRYPTO)/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key
ORDERER=--orderer ${ORDERER_ADDRESS} --tls --cafile ${ORDERER_ORG_TLS_CERTFILE} --clientauth --certfile ${PEER0_ORG1_TLS_CERTFILE} --keyfile ${PEER0_ORG_TLS_KEYFILE}

PEER0_ORG1_TLS_ROOTCERTFILE=$(CRYPTO)/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt
PEER0_ORG2_TLS_ROOTCERTFILE=$(CRYPTO)/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt
PEER_CONN_PARAMS=--peerAddresses ${PEER0_ORG1_ADDRESS} --tlsRootCertFiles ${PEER0_ORG1_TLS_ROOTCERTFILE} --peerAddresses ${PEER0_ORG2_ADDRESS} --tlsRootCertFiles ${PEER0_ORG2_TLS_ROOTCERTFILE}


cli: ## Run bash in docker cli container
	$(COMPOSE) exec cli bash

start:
	$(COMPOSE) up -d
	$(COMPOSE) ps

cryptogen: ## Generate all crypto materials necessary for ledger network works properly
	rm -rf ./network/raft/crypto/*
	rm -rf ./network/raft/artifacts/*
	$(COMPOSE) run --rm --no-deps cli cryptogen generate --config=./crypto-config.yaml --output=crypto
	$(COMPOSE) run --rm --no-deps cli configtxgen -profile Genesis -configPath . -channelID syschannel -outputBlock ./artifacts/genesis.block
	$(COMPOSE) run --rm --no-deps cli configtxgen -profile Channel -configPath . -channelID mychannel -outputCreateChannelTx ./artifacts/mychannel.tx
	$(COMPOSE) run --rm --no-deps cli configtxgen -profile Channel -configPath . -outputAnchorPeersUpdate ./artifacts/Org1MSPanchors.tx -channelID mychannel -asOrg Org1MSP
	$(COMPOSE) run --rm --no-deps cli configtxgen -profile Channel -configPath . -outputAnchorPeersUpdate ./artifacts/Org2MSPanchors.tx -channelID mychannel -asOrg Org2MSP
	$(COMPOSE) run --rm --no-deps cli sh -c 'configtxgen -inspectBlock ./artifacts/genesis.block > ./artifacts/genesis.json'

network: ## Initialize fabric network (Channels, peers etc.)
	$(COMPOSE) exec cli peer channel create -c ${CHANNEL_NAME} -f ./artifacts/${CHANNEL_NAME}.tx -o ${ORDERER_ADDRESS} \
		--tls true --cafile $(CRYPTO)/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem
	docker exec $(PEER1) cli peer channel join -b ${CHANNEL_NAME}.block
	docker exec $(PEER2) cli peer channel join -b ${CHANNEL_NAME}.block
	docker exec $(PEER3) cli peer channel join -b ${CHANNEL_NAME}.block
	docker exec $(PEER4) cli peer channel join -b ${CHANNEL_NAME}.block
	docker exec $(ORG1) cli peer channel update -o ${ORDERER_ADDRESS} -c ${CHANNEL_NAME} -f $(CRYPTO)/../artifacts/Org1MSPanchors.tx --tls --cafile ${ORDERER_TLS_CERTFILE}
	docker exec $(ORG2) cli peer channel update -o ${ORDERER_ADDRESS} -c ${CHANNEL_NAME} -f $(CRYPTO)/../artifacts/Org2MSPanchors.tx --tls --cafile ${ORDERER_TLS_CERTFILE}

chaincode: ## Deploy real chaincode to network
	docker exec cli rm -rf /opt/gopath/src/github.com/chaincode_compiled
	$(COMPOSE) run --rm --no-deps chaincode sh -c "npm install"
	$(COMPOSE) run --rm --no-deps chaincode sh -c "cd ./src/chaincode && npm run build"
	./scripts/chaincode_package.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_LANG} ${CHAINCODE_PATH}

	./scripts/chaincode_install.sh ${CHAINCODE_NAME} ${CHAINCODE_PATH} "${PEER1}"
	./scripts/chaincode_install.sh ${CHAINCODE_NAME} ${CHAINCODE_PATH} "${PEER2}"
	./scripts/chaincode_install.sh ${CHAINCODE_NAME} ${CHAINCODE_PATH} "${PEER3}"
	./scripts/chaincode_install.sh ${CHAINCODE_NAME} ${CHAINCODE_PATH} "${PEER4}"

	./scripts/chaincode_approve.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_SEQUENCE} ${CHANNEL_NAME} "${ORG1}" "${ORDERER}"
	./scripts/chaincode_approve.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_SEQUENCE} ${CHANNEL_NAME} "${ORG2}" "${ORDERER}"

	./scripts/chaincode_commit.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_SEQUENCE} ${CHANNEL_NAME} "${PEER_CONN_PARAMS}" "${ORG1}" "${ORDERER}"

	./scripts/chaincode_init.sh ${CHAINCODE_NAME} ${CHAINCODE_CONSTRUCTOR} ${CHANNEL_NAME} "${PEER_CONN_PARAMS}" "${ORG1}" "${ORDERER}"

	echo 'deployed' > src/chaincode/chaincode_deployed

delete_chaincode:
	docker ps -aq --filter name=dev-peer | xargs docker rm -fv || true
	$(COMPOSE) exec peer0.org1.example.com sh -c "rm -rf /var/hyperledger/production/lifecycle/chaincodes/*"
	$(COMPOSE) exec peer1.org1.example.com sh -c "rm -rf /var/hyperledger/production/lifecycle/chaincodes/*"
	$(COMPOSE) exec peer0.org2.example.com sh -c "rm -rf /var/hyperledger/production/lifecycle/chaincodes/*"
	$(COMPOSE) exec peer1.org2.example.com sh -c "rm -rf /var/hyperledger/production/lifecycle/chaincodes/*"

reset: down ## Stop and run all from scratch (Without regeneration crypto materials)
	make start
	sleep 10
	make network
	sleep 5
	make chaincode

down: ## Kill all containers, including dev*.peer's (created by instantiating chaincode)
	$(COMPOSE) down -v
	docker ps -aq --filter name=dev-peer | xargs docker rm -fv || true
	docker volume prune -f || true
	docker images -q dev-peer* | xargs docker rmi || true

build: ## Build docker images with werf
	werf build --stages-storage :local --introspect-error
