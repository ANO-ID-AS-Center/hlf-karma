.PHONY: help network bin chaincode tools
.DEFAULT_GOAL := help

CRYPTO = /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto-config

CHAINCODE_VERSION = $(shell cat ./src/chaincode/package.json | jq '.version')
CHAINCODE_NAME="main"
CHAINCODE_LANG="node"
CHAINCODE_PATH="/opt/gopath/src/github.com/chaincode/chaincode_compiled"
CHAINCODE_SEQUENCE=1
CHAINCODE_CONSTRUCTOR='{"Args":[]}'

CHANNEL_NAME=primary

ORDERER=--orderer orderer.example.com:7050

PEER_CONN_PARAMS=""

ORG1="--env CORE_PEER_LOCALMSPID=Org1MSP --env CORE_PEER_ADDRESS=peer0.org1.example.com:7051 --env CORE_PEER_MSPCONFIGPATH=$(CRYPTO)/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp"

cli: ## Run bash in docker cli container
	$(COMPOSE) exec cli bash

start:
	$(COMPOSE) up -d
	$(COMPOSE) ps

stop:
	$(COMPOSE) down

cryptogen: ## Generates crypto materials
	$(COMPOSE) run --rm --no-deps cli rm -rf ./crypto-config
	$(COMPOSE) run --rm --no-deps cli cryptogen generate --config=./crypto-config.yaml --output=./crypto-config
	$(COMPOSE) run --rm --no-deps cli configtxgen -configPath . -profile OneOrgOrdererGenesis -channelID system-channel -outputBlock ./config/genesis.block

network: ## Initialize fabric network (Channels, peers etc.)
	$(COMPOSE) exec cli configtxgen -profile OneOrgChannel -configPath . -channelID ${CHANNEL_NAME} -outputCreateChannelTx ./config/${CHANNEL_NAME}.tx
	$(COMPOSE) exec cli peer channel create ${ORDERER} -f ./config/${CHANNEL_NAME}.tx -c ${CHANNEL_NAME} --outputBlock ./config/${CHANNEL_NAME}.block
	$(COMPOSE) exec cli configtxgen -profile OneOrgChannel -configPath . -channelID ${CHANNEL_NAME} -outputAnchorPeersUpdate=./config/Org1MSPanchors.tx -asOrg Org1MSP
	$(COMPOSE) exec cli peer channel join -b ./config/${CHANNEL_NAME}.block
	$(COMPOSE) exec cli peer channel update ${ORDERER} -c ${CHANNEL_NAME} -f ./config/Org1MSPanchors.tx

chaincode: ## Deploy real chaincode to network
	$(COMPOSE) exec cli rm -rf ${CHAINCODE_PATH}
	$(COMPOSE) run --rm --no-deps chaincode sh -c "npm install"
	$(COMPOSE) run --rm --no-deps chaincode sh -c "cd ./src/chaincode && npm run build"
	./scripts/chaincode_package.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_LANG} ${CHAINCODE_PATH}
	./scripts/chaincode_install.sh ${CHAINCODE_NAME} ${CHAINCODE_PATH} ${ORG1}
	./scripts/chaincode_approve.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_SEQUENCE} ${CHANNEL_NAME} ${ORG1} "${ORDERER}"
	./scripts/chaincode_commit.sh ${CHAINCODE_NAME} ${CHAINCODE_VERSION} ${CHAINCODE_SEQUENCE} ${CHANNEL_NAME} ${PEER_CONN_PARAMS} ${ORG1} "${ORDERER}"
	./scripts/chaincode_init.sh ${CHAINCODE_NAME} ${CHAINCODE_CONSTRUCTOR} ${CHANNEL_NAME} ${PEER_CONN_PARAMS} ${ORG1} "${ORDERER}"
	echo 'deployed' > src/chaincode/chaincode_deployed

delete_chaincode:
	docker ps -aq --filter name=dev-peer | xargs docker rm -fv || true
	$(COMPOSE) exec peer0.org1.example.com sh -c "rm -rf /var/hyperledger/production/chaincodes/*"

reset: down ## Stop and run all from scratch
	sudo rm -rf src/chaincode/node_modules
	sudo rm -rf src/chaincode/chaincode_deployed
	$(COMPOSE) up -d
	make network
	make chaincode

down: ## Kill all containers, including dev*.peer's (created by instantiating chaincode)
	$(COMPOSE) down -v
	docker ps -aq --filter name=dev-peer | xargs docker rm -fv || true
	docker volume prune -f || true
	docker images -q dev-peer* | xargs docker rmi || true

build: ## Build docker images with werf
	werf build --stages-storage :local --introspect-error
